{"version":3,"sources":["../src/util.js"],"names":["getToken","user","jwt","sign","_id","email","isAdmin","name","config","JWT_SECRET","expiresIn","isAuth","req","res","next","token","headers","authorization","userToken","slice","length","verify","err","decode","status","send","msg","console","log"],"mappings":";;;;;;;AAAA;;AACA;;;;AAGO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD;AAAA,SAAUC,yBAAIC,IAAJ,CAChC;AACEC,IAAAA,GAAG,EAAEH,IAAI,CAACG,GADZ;AAEEC,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFd;AAGEC,IAAAA,OAAO,EAAEL,IAAI,CAACK,OAHhB;AAIEC,IAAAA,IAAI,EAAEN,IAAI,CAACM;AAJb,GADgC,EAOhCC,mBAAOC,UAPyB,EAQhC;AACEC,IAAAA,SAAS,EAAE;AADb,GARgC,CAAV;AAAA,CAAjB;;;;AAcA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;AACvC,MAAMC,KAAK,GAAIH,GAAG,CAACI,OAAJ,CAAYC,aAA3B;;AACA,MAAGF,KAAH,EAAS;AACP;AACA,QAAMG,SAAS,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeJ,KAAK,CAACK,MAArB,CAAlB,CAFO,CAGP;;AACAlB,6BAAImB,MAAJ,CAAWH,SAAX,EAAsBV,mBAAOC,UAA7B,EAAyC,UAACa,GAAD,EAAMC,MAAN,EAAe;AACtD,UAAGD,GAAH,EAAO;AACL,eAAOT,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,GAAG,EAAC;AAAL,SAArB,CAAP;AACD,OAHqD,CAItD;;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CL,MAA3C;AACAX,MAAAA,GAAG,CAACX,IAAJ,GAAWsB,MAAX;AACAT,MAAAA,IAAI;AACJ;AACD,KATD;AAUD,GAdD,MAeI;AACF,WAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAC;AAAL,KAArB,CAAP;AACD;AACF,CApBM;;;;AAuBA,IAAMpB,OAAO,GAAG,SAAVA,OAAU,CAACM,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;AACxC,MAAGF,GAAG,CAACX,IAAJ,IAAYW,GAAG,CAACX,IAAJ,CAASK,OAAxB,EAAgC;AAC9B,WAAOQ,IAAI,EAAX;AACD;;AACD,SAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,GAAG,EAAC;AAAL,GAArB,CAAP;AACD,CALM","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport config from \"./config\";\n\n\nexport const getToken = (user) => jwt.sign(\n  {\n    _id: user._id,\n    email: user.email,\n    isAdmin: user.isAdmin,\n    name: user.name,\n  },\n  config.JWT_SECRET,\n  {\n    expiresIn: '48h',\n  },\n);\n\n\nexport const isAuth = (req, res, next) =>{\n  const token  = req.headers.authorization;\n  if(token){\n    // get token after Bearer\n    const userToken = token.slice(7, token.length);\n    // check token is valid\n    jwt.verify(userToken, config.JWT_SECRET, (err, decode)=>{\n      if(err){\n        return res.status(401).send({msg:'invalid Token'});\n      }\n      // if token is valid\n      console.log(\"token assigned to req.user \", decode);\n      req.user = decode;\n      next();\n      return ;\n    });\n  }\n  else{\n    return res.status(401).send({msg:\"Token is not supplied\"});\n  }\n}\n\n\nexport const isAdmin = (req, res, next) =>{\n  if(req.user && req.user.isAdmin){\n    return next();\n  }\n  return res.status(401).send({msg:\"Admin token not supplied\"});\n}\n"],"file":"util.js"}